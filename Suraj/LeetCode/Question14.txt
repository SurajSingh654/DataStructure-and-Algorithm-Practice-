Link: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/


Question: Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.


Approach: {Use Recursion and Binary Searching}

Solution: 
class Solution {
    int minValue(int[] nums,int low,int high){
        int mid = low + ((high-low)>>1);
        // base case
        if((low==mid)||(high==mid)){
            return Math.min(nums[low],nums[high]);
        }
        //  if(low==high){
        //     return nums[low];
        // }
        
        
        if((nums[low]<nums[mid])&&(nums[mid]<nums[high])){
            return nums[low];
        }
        if(nums[low]<nums[mid]){ // Left Part Sorted
            return minValue(nums,mid,high);
        }else{
            return minValue(nums,low,mid);
        }
    }
    public int findMin(int[] nums) {
        if(nums[0]<nums[nums.length-1]){
            return nums[0];
        }
        return minValue(nums,0,nums.length-1);
    }
}


Approach: {Two Pointer Approach}

Solution: 

class Solution {
    public int findMin(int[] nums) {
        if (nums[0] < nums[nums.length - 1]) {
            return nums[0];
        }
        int low = 0;
        int high = nums.length - 1;
        while (low <= high) {
            int mid = low + ((high - low) >> 1);
            if ((low == mid) || (high == mid)) {
                return Math.min(nums[low], nums[high]);
            }
            if ((nums[mid - 1] < nums[mid]) && (nums[mid] > nums[mid + 1])) {
                return nums[mid + 1];
            }
            if ((nums[mid - 1] > nums[mid]) && (nums[mid] < nums[mid + 1])) {
                return nums[mid];
            }
            if ((nums[low] > nums[mid]) && (nums[mid] < nums[high])) {
                high = mid - 1;
            }
            if ((nums[low] < nums[mid]) && (nums[mid] > nums[high])) {
                low = mid + 1;
            }
        }
        return 0;
    }
}