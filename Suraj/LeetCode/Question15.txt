Link: https://leetcode.com/problems/search-in-rotated-sorted-array/


Question: There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Explanation: https://www.youtube.com/watch?v=r3pMQ8-Ad5s


Approach: {Use Binary Search and Two Pointer Approach}




Solution:

class Solution {
    public int search(int[] nums, int target) {
        int length = nums.length;
        if(length==1 ){
            if(nums[0]==target){
                return 0;
            }else{
                return -1;
            }
        }
        int lowIndex = 0;
        int highIndex = length -1;
        while(lowIndex<=highIndex){
            int midIndex = lowIndex + ((highIndex-lowIndex)>>1);
            System.out.println(midIndex);
            if(nums[midIndex]==target){
                return midIndex;
            }
            if(nums[lowIndex]<=nums[midIndex]){
                // Left Part is sorted
                // System.out.println("Left Part is Sorted!");
                if(target>=nums[lowIndex]&&target<nums[midIndex]){
                    
                      highIndex = midIndex -1;
                  }else{
                      lowIndex = midIndex +1;
                }
            }else{
                  // Right Part is sorted
                // System.out.println("Right Part is Sorted!");
                if(target<=nums[highIndex]&&target>nums[midIndex]){
                      lowIndex = midIndex + 1;
                  }else{
                      highIndex = midIndex - 1;
                }
            }
        }
        return -1;
    }
}