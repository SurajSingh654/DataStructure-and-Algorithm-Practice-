Link: https://practice.geeksforgeeks.org/problems/search-in-a-rotated-array4618/1/#

Question: Given a sorted and rotated array A of N distinct elements which is rotated at some point, and given an element key. The task is to find the index of the given element key in the array A.

Approach: 1

Use Binary Search . Find mid if left of mid is unsorted , it guarantees that rigth part is sorted...Use this knowledge for searching ...

Solution: 1

class Solution
{
    int search(int A[], int l, int h, int key)
    {
        // Complete this function
        if (l > h) 
        {
            return -1;
        }
        
        int mid = (l+h)/2; 
        if (A[mid] == key)
        {
            return mid; 
        }
    
        if (A[l] <= A[mid])
        { 
            if (key >= A[l] && key <= A[mid]) 
                return search(A, l, mid-1, key); 
            return search(A, mid+1, h, key); 
        } 
        
        if (key >= A[mid] && key <= A[h]) 
            return search(A, mid+1, h, key); 
        return search(A, l, mid-1, key); 
    }
}


Approach: 2 Find Pivot index {index having largest value } . So, that its left part and right partes is sorted in ascending order ...Then apply Binary Search ...


Solution: 2

class Solution
{
     /* Searches an element key in a 
       pivoted sorted array arrp[]
       of size n */
    int pivotedBinarySearch(int arr[], int n, int key)
    {
        int pivot = findPivot(arr, 0, n - 1);

        // If we didn't find a pivot, then
        // array is not rotated at all
        if (pivot == -1)
            return binarySearch(arr, 0, n - 1, key);

        // If we found a pivot, then first
        // compare with pivot and then
        // search in two subarrays around pivot
        if (arr[pivot] == key)
            return pivot;
        if (arr[0] <= key)
            return binarySearch(arr, 0, pivot - 1, key);
        return binarySearch(arr, pivot + 1, n - 1, key);
    }

    /* Function to get pivot. For array 
       3, 4, 5, 6, 1, 2 it returns
       3 (index of 6) */
    int findPivot(int arr[], int low, int high)
    {
        // base cases
        if (high < low)
            return -1;
        if (high == low)
            return low;

        /* low + (high - low)/2; */
        int mid = (low + high) / 2;
        if (mid < high && arr[mid] > arr[mid + 1])
            return mid;
        if (mid > low && arr[mid] < arr[mid - 1])
            return (mid - 1);
        if (arr[low] >= arr[mid])
            return findPivot(arr, low, mid - 1);
        return findPivot(arr, mid + 1, high);
    }

    /* Standard Binary Search function */
    int binarySearch(int arr[], int low, int high, int key)
    {
        if (high < low)
            return -1;

        /* low + (high - low)/2; */
        int mid = (low + high) / 2;
        if (key == arr[mid])
            return mid;
        if (key > arr[mid])
            return binarySearch(arr, (mid + 1), high, key);
        return binarySearch(arr, low, (mid - 1), key);
    }

    int search(int A[], int l, int h, int key)
    {
        return pivotedBinarySearch(A, A.length, key); 
    }
}